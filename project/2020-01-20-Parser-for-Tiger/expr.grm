%%

%verbose
%pure

%term  EOF
	| INT of int | ID of string
	| PLUS | MINUS | MULTIPLY | DIVIDE
	| AND | OR
	| EQUALS | ASSIGN | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | GRETHAN | GRETHANEQUAL
	| LET | IN | END | VAR 
	| FUNCTION
	| COLON | COMMA | SEMICOLON
	| LPAREN | RPAREN | LSQBR | RSQBR | LCUBR | RCUBR
	| IF | THEN | ELSE 
	| WHILE | FOR | TO | BREAK | NEW
	| TYPE | ARRAY | DO | OF
	| NIL | INTK | STRINGK | DOT
	| DOUBQUOTES | BACKSLASH
	| IMPORT

%nonterm S			of Ast.Prog
	   | PROGRAM  	of Ast.Prog
       | EXP     	of Ast.Expr
	   | EXPS 		of Ast.Expr list
	   | LVALUE     of Ast.Lvalue
	   | DEC 		of Ast.decl
	   | DECS 		of Ast.decl list
	   | VARDECL	of Ast.decl
	   | EXPCOMM 	of Ast.Expr list
	   | TY         of Ast.Ty
	
%pos int
%eop EOF
%noshift EOF


%nonassoc ID
%nonassoc WHILE DO
%right THEN
%right ELSE
%nonassoc LPAREN RPAREN OF
%left OR
%left AND

%nonassoc EQUALS NOTEQUAL LESSTHAN LESSTHANEQUAL GRETHAN GRETHANEQUAL
%left ASSIGN
%left PLUS MINUS
%left MULTIPLY DIVIDE


%name Tiger

%%

S	: 	PROGRAM					(PROGRAM)

PROGRAM	:	EXP	 ( Ast.PE(EXP) )
		|	DECS	( Ast.PD(DECS) )

EXP     :   INT                      ( Ast.INT(INT) )
		| 	ID 						 ( Ast.ID(ID) )
		| 	LVALUE					 ( Ast.LVE(LVALUE) )
		|	NEW TY					 ( Ast.NEW(TY))
        |   EXP PLUS EXP             ( Ast.BINOP(EXP1, Ast.Plus, EXP2) )
		|	EXP MINUS EXP			 ( Ast.BINOP(EXP1, Ast.Minus, EXP2) )
		|	EXP MULTIPLY EXP		 ( Ast.BINOP(EXP1, Ast.Mul, EXP2) )
		|	EXP DIVIDE EXP			 ( Ast.BINOP(EXP1, Ast.Div, EXP2) )
		| 	EXP EQUALS EXP 			 ( Ast.BINOP(EXP1, Ast.Equals, EXP2) )
		| 	EXP NOTEQUAL EXP 		 ( Ast.BINOP(EXP1, Ast.NotEqual, EXP2) )
		|	EXP LESSTHAN EXP		 ( Ast.BINOP(EXP1, Ast.LessThan, EXP2) )
		|	EXP LESSTHANEQUAL EXP	 ( Ast.BINOP(EXP1, Ast.LessThanEqual, EXP2) )
		|	EXP GRETHAN EXP			 ( Ast.BINOP(EXP1, Ast.GreThan, EXP2) )
		|	EXP GRETHANEQUAL EXP	 ( Ast.BINOP(EXP1, Ast.GreThanEqual, EXP2) )
		|	LPAREN EXPS RPAREN       ( Ast.BREX(EXPS) ) 
		|	MINUS EXP				 ( Ast.NEXP(EXP))
		|   LVALUE ASSIGN EXP        ( Ast.ASSIGN(LVALUE, EXP) )
		|	LVALUE LPAREN EXP RPAREN ( Ast.FUNCALL(LVALUE, EXP) )
		| 	LET DECS IN EXPS END	 ( Ast.LET(DECS, EXPS) )
		| 	ID LPAREN EXPCOMM RPAREN ( Ast.FUNC(ID, EXPCOMM) )
		| 	IF EXP THEN EXP 		 ( Ast.IF(EXP1, EXP2) )
		| 	IF EXP THEN EXP ELSE EXP ( Ast.IFELSE(EXP1, EXP2, EXP3) )
		|	FOR ID ASSIGN EXP TO EXP DO EXP ( Ast.FOR(ID, EXP1, EXP2, EXP3) )
		|	WHILE EXP DO EXP  ( Ast.WHILE(EXP1, EXP2) )		
		|	BREAK			( Ast.BREAK )

EXPCOMM :  	(* empty *)				 ( [] )
		| 	EXP 					 ( EXP::[] )
		|     EXP COMMA EXPCOMM 		 ( EXP::EXPCOMM )
		
		

EXPS 	: 	(* empty *)				 ( [] )
 		| 	EXP 					 ( EXP::[] )
		|	EXP SEMICOLON EXPS		 ( EXP::EXPS )
		
		

DECS 	:  	(* empty *) 			 ( [] )
		| 	DEC						 ( DEC::[] )
		|	DEC DECS		 ( DEC::DECS )
		
		
DEC  	: 	VARDECL					 ( VARDECL )
		|	TYPE ID EQUALS TY	(Ast.TYPEDEC(ID, TY))
		|	IMPORT ID				(Ast.IMPDEC(ID))

TY		:	ID						(Ast.TYPEID(ID))
		
VARDECL : 	VAR ID ASSIGN EXP 		 ( Ast.VARDECL(ID, EXP) )

LVALUE:     ID						(Ast.LVAL_IDEN(ID))
		|	LVALUE DOT ID			(Ast.FIELD (LVALUE,ID))
		|	LVALUE LSQBR EXP RSQBR	(Ast.ELEMENT (LVALUE,EXP))	  
		
